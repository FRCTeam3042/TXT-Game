package RobotSim.subsytems;

import RobotSim.AnimThread;
import RobotSim.AnimMap;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

public class SimDrive extends javax.swing.JPanel {
    static public int magic=1;
    static public int minimag=1;
    //Animation thread
    AnimThread animation;

    //Objects to draw on canvas
    public Ball ball = new Ball();
    public Robot robot = new Robot();
    public Goal goal = new Goal();
    
    boolean intakeOn = false;

    /**
     * Constructor for the animation canvas
     */
    public SimDrive() {
        initComponents();
        setPreferredSize(new java.awt.Dimension(AnimMap.XDim, AnimMap.YDim));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(602, 467));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Override the paintComponent method to draw our canvas elements
     *
     * @param g
     */
    @Override
    public void paintComponent(Graphics g) {
        //Allow default painting
        super.paintComponent(g);

        //Set up 2D Graphics
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        //Draw Field Elements
        g2d.setColor(Color.red);
        g2d.drawRect(1, 1, 599, 464);
        g2d.drawRoundRect(450, 175, 150, 113, 50, 50);

        //Draw objects
        goal.draw(g2d);
        robot.draw(g2d);
        ball.draw(g2d);
    }

    /**
     * Animate the elements on the canvas
     */
    public void animFrame() {
        minimag++;
        if(minimag>60){
            minimag=1;
        }
        magic=(minimag/20)+1;
        robot.update();
        ball.update(robot.getX(), robot.getY());
        
        if (ball.intersects(robot) && intakeOn){
            ball.setCarrying(true);
        }
        else if (!ball.scored&&ball.intersects(goal) && !ball.getCarrying()) {
            robot.scoreTracker.addToScore();
            ball.scored();
        }
        repaint();
    }

    /**
     * Run the animation
     */
    public void runAnim() {
        if ((animation == null) || (!animation.isAlive())) {
            animation = new AnimThread(this);
            animation.start();
        }
    }

    /**
     * Stop the animation
     */
    public void stopAnim() {
        if (animation.isAlive()) {
            animation.interrupt();
        }
    }

    public void intake(boolean intakeStatus) {
        intakeOn = intakeStatus;
    }

}
